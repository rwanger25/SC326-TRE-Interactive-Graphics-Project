title = "Density Distribution of \nInjuries across Magnitude")+
scale_fill_brewer(type = "seq", palette = "YlOrBr") +
tornadoe_theme +
scale_x_log10(limits = c(1, 5000)) +
ylim(c(0, 1.5))
ggsave("mag_fat_density_300.png", mag_fat_density, dpi = 300, width = 9)
ggsave("mag_fat_density_300.png", mag_fat_density, dpi = 300, width = 9)
ggsave("mag_inj_density_300.png", mag_inj_density, dpi = 300, width = 9)
stacked_loss_count
#proportional spinechart, stacked barchart
stacked_loss_count <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "dodge")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Number of Losses within Each Range",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado \nIntensity")+
tornadoe_theme +
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F)
#graph showing count of crop losses acros smag
ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "dodge")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Count of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses across \nTornado Intensity",
caption = "Source: NOAA National Weather Service Storm Prediction Center and National Climate Date Center")+
tornadoe_theme +
scale_fill_brewer(type = "seq", palette = "YlOrBr", na.value = "grey50")
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_loss_count <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "dodge")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Number of Losses within Each Range",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado \nIntensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill")+
labs(x = "Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses across Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_loss_count <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "dodge")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Number of Losses within Each Range",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado \nIntensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado \nIntensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill")+
labs(x = "Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses across Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey50")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
stacked_loss
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
stacked_loss
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey90")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
stacked_loss
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey90")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill", color = "grey90")+
labs(x = "Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses across Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey80")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
stacked_loss
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill", color = "grey90")+
labs(x = "Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses \nacross Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill", color = "grey80")+
labs(x = "Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses \nacross Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey80")+
labs(x = "Magnitude of Tornados (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
#proportional spinechart, stacked barchart
stacked_loss_count <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "dodge")+
labs(x = "Tornado Magnitude (EF-scale)",
y = "Number of Losses within Each Range",
fill = "Property Losses",
title = "Financial Property Losses across Tornado \nIntensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_loss_count <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "dodge")+
labs(x = "Tornado Magnitude (EF-scale)",
y = "Number of Losses within Each Range",
fill = "Property Losses",
title = "Financial Property Losses across Tornado \nIntensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#turns off scientifc notation
options(scipen = 999)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(gridExtra) #for grid.arrange
tornadoes <- read.csv("1950-2023_actual_tornadoes.csv")
tornadoe_theme <-
theme_classic()+
theme(text = element_text(color = "#632f0dff"),
plot.title = element_text(family = "Trebuchet MS", face = "bold", size = 30),
axis.text = element_text(family = "Palatino", size = 21, color = "#632f0dff"),
axis.title = element_text(family = "Palatino", size = 24),
plot.subtitle = element_text(size = 20, family = "Palatino"),
legend.text = element_text(size = 21, family = "Palatino"),
legend.title = element_text(size = 22, family = "Palatino", face = "bold"),
legend.box.background = element_rect(),
legend.box.margin = margin(5,5,5,5),
plot.caption = element_text(size = 24, family = "Palatino"))
library(dplyr)
library(gridExtra) #for grid.arrange
tornadoes <- read.csv("1950-2023_actual_tornadoes.csv")
tornadoe_theme <-
theme_classic()+
theme(text = element_text(color = "#632f0dff"),
plot.title = element_text(family = "Trebuchet MS", face = "bold", size = 30),
axis.text = element_text(family = "Palatino", size = 21, color = "#632f0dff"),
axis.title = element_text(family = "Palatino", size = 24),
plot.subtitle = element_text(size = 20, family = "Palatino"),
legend.text = element_text(size = 21, family = "Palatino"),
legend.title = element_text(size = 22, family = "Palatino", face = "bold"),
legend.box.background = element_rect(),
legend.box.margin = margin(5,5,5,5),
plot.caption = element_text(size = 24, family = "Palatino"))
#removing non-continental U.S. tornadoes
tornadoes_no_NA <- tornadoes_no_NA %>%
filter(st != "PR") %>%
filter(st != "VI") %>%
filter(st != "AL") %>%
filter(st != "HI")
#Recategorizing -9 mags in dataset to NA
tornadoes_no_NA <- tornadoes  %>%
mutate(mag = factor(mag)) %>% #making it a factor
mutate(mag = case_when(mag == "-9" ~ NA, mag != "-9" ~ mag)) %>%
filter(!is.na(mag))
#Recategorizing -9 mags in dataset to NA but with int instead of factor
tornadoes_no_NA_int <- tornadoes  %>% #without making it a factor
mutate(mag = case_when(mag == "-9" ~ NA, mag != "-9" ~ mag)) %>%
filter(!is.na(mag))
#recatorgizing loss
tornadoes_no_NA_loss <- tornadoes_no_NA %>%
mutate(loss = factor(loss)) %>%
mutate(loss = case_when(loss == "0" ~ NA,  #recatorgizing the 0-9 loss classes, but may be unecessary
loss == "1" ~ "<$50",
loss =="2" ~ "$50-$500",
loss =="5" ~ "$500-$5,000",
loss =="4" ~ "$5,000-$50,000",
loss =="5" ~ "$50,000-$500,000",
loss =="6" ~ "$500,000-$5,000,000",
loss =="7" ~ "$5,000,000-$50,000,000",
loss =="8" ~ "$50,000,000-$500,000,000",
loss =="9" ~ "$5,000,000,000")) %>%
filter(!is.na(loss)) %>%
mutate(loss = fct_relevel(loss, c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000")))
#recatogorizing closs
tornadoes_no_NA_closs <- tornadoes_no_NA %>%
mutate(closs = case_when(closs == 0 ~ NA,  #recatorgizing the 0-9 loss classes, but may be unecessary
closs > 0 & closs < 50 ~ "<$50",
closs > 50 & closs < 500  ~ "$50-$500",
closs > 500 & closs < 5000  ~ "$500-$5,000",
closs > 5000 & closs < 50000  ~ "$5,000-$50,000",
closs > 50000 & closs < 500000  ~ "$50,000-$500,000",
closs > 500000 & closs < 5000000  ~ "$500,000-$5,000,000",
closs > 5000000 & closs < 50000000 ~ "$5,000,000-$50,000,000",
closs > 50000000 & closs < 500000000 ~ "$50,000,000-$500,000,000",
closs > 500000000 ~ "$5,000,000,000")) %>%
mutate(closs = factor(closs)) %>%
filter(!is.na(closs)) %>%
mutate(closs = fct_relevel(closs, c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000"))) %>%
mutate(closs = fct_expand(closs, "$5,000,000,000"))
# Creating data frame of average of fatality with error bars -- USING SD FOR CI
tornadoes_fat_mag_sd <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_fat = mean(fat),
count = n(),
sd = sd(fat)) %>%  #  summarize by calculating count of each mag
mutate(lower = mean_fat - 1.96 * (sd/sqrt(count)),  #  compute CI lower bound
upper = mean_fat + 1.96 * (sd/sqrt(count)))  #  compute CI upper bound
#Creating data frame of PROPORTION of fatality with error bars
tornadoes_fat_mag_prop <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_fat = mean(fat), count = n()) %>%  #  summarize by calculating count of each mag
mutate(total = sum(count),  #  compute total number of observations
proportion = count / total,  #  compute proportions
std_error = sqrt(proportion * (1 - proportion) / total),  #  compute standard error of each proportion
lower = proportion - 1.96 * std_error,  #  compute CI lower bound
upper = proportion + 1.96 * std_error)  #  compute CI upper bound
#Creating data frame of PROPORTION of fatality with error bars
tornadoes_fat_mag_prop <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_fat = mean(fat), count = n()) %>%  #  summarize by calculating count of each mag
mutate(total = sum(count),  #  compute total number of observations
proportion = count / total,  #  compute proportions
std_error = sqrt(proportion * (1 - proportion) / total),  #  compute standard error of each proportion
lower = proportion - 1.96 * std_error,  #  compute CI lower bound
upper = proportion + 1.96 * std_error)  #  compute CI upper bound
### Injuries
```{r}
# Creating data frame of average of fatality with error bars -- USING SD FOR CI
tornadoes_inj_mag_sd <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_inj = mean(inj),
count = n(),
sd = sd(fat)) %>%  #  summarize by calculating count of each mag
mutate(lower = mean_inj - 1.96 * (sd/sqrt(count)),  #  compute CI lower bound
upper = mean_inj + 1.96 * (sd/sqrt(count)))  #  compute CI upper bound
#Creating data frame of PROPORTION of fatality with error bars
tornadoes_inj_mag_prop <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_inj = mean(inj), count = n()) %>%  #  summarize by calculating count of each mag
mutate(total = sum(count),  #  compute total number of observations
proportion = count / total,  #  compute proportions
std_error = sqrt(proportion * (1 - proportion) / total),  #  compute standard error of each proportion
lower = proportion - 1.96 * std_error,  #  compute CI lower bound
upper = proportion + 1.96 * std_error)  #  compute CI upper bound
#Creating data frame of PROPORTION of fatality with error bars
tornadoes_inj_mag_prop <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_inj = mean(inj), count = n()) %>%  #  summarize by calculating count of each mag
mutate(total = sum(count),  #  compute total number of observations
proportion = count / total,  #  compute proportions
std_error = sqrt(proportion * (1 - proportion) / total),  #  compute standard error of each proportion
lower = proportion - 1.96 * std_error,  #  compute CI lower bound
upper = proportion + 1.96 * std_error)  #  compute CI upper bound
### Losses -- THIS VARIABLE SUCKS WHAT THE HECK
```{r}
# Creating data frame of average of losses with error bars -- USING SD FOR CI
tornadoes_losses_sd <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_loss = mean(loss),
count = n(),
sd = sd(loss)) %>%  #  summarize by calculating count of each mag
mutate(lower = mean_loss - 1.96 * (sd/sqrt(count)),  #  compute CI lower bound
upper = mean_loss + 1.96 * (sd/sqrt(count)))  #  compute CI upper bound
# Creating data frame of average of losses with error bars -- USING SD FOR CI
tornadoes_losses_sd <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_loss = mean(loss),
count = n(),
sd = sd(loss)) %>%  #  summarize by calculating count of each mag
mutate(lower = mean_loss - 1.96 * (sd/sqrt(count)),  #  compute CI lower bound
upper = mean_loss + 1.96 * (sd/sqrt(count)))  #  compute CI upper bound
### CLoss
```{r}
# Creating data frame of average of losses with error bars -- USING SD FOR CI
tornadoes_closses_sd <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_closs = mean(closs),
count = n(),
sd = sd(closs)) %>%  #  summarize by calculating count of each mag
mutate(lower = mean_closs - 1.96 * (sd/sqrt(count)),  #  compute CI lower bound
upper = mean_closs + 1.96 * (sd/sqrt(count)))  #  compute CI upper bound
#creating a data frame of the average injuries and fatalities values and error bars USING SD
tornadoes_inj_fat_mag_SD <- tornadoes_no_NA %>%
group_by(mag) %>%
summarise(mean_fat = mean(fat),
mean_inj = mean(inj),
count_fat = n(),
count_inj = n(),
sd_fat = sd(fat),
sd_inj = sd(inj)) %>%  #  summarize by calculating count of each mag
mutate(lower_fat = mean_fat - 1.96 * (sd_fat/sqrt(count_fat)),  #  compute CI lower bound
upper_fat = mean_fat + 1.96 * (sd_fat/sqrt(count_fat))) %>% #  compute CI upper bound
mutate(lower_inj = mean_inj - 1.96 * (sd_inj/sqrt(count_inj)),  #  compute CI lower bound
upper_inj = mean_inj + 1.96 * (sd_inj/sqrt(count_inj)))  #  compute CI upper bound
# pivoting to combine the two variables into one
pivot_inj_fat <- tornadoes_inj_fat_mag_SD %>%
pivot_longer(!mag, names_to = "name", values_to = "value") %>%
mutate(inj_fat = if_else(grepl("fat", name), "Fatality", "Injury"),
name = str_split_fixed(name, "_", 2)[ , 1]) %>%
pivot_wider(names_from = "name", values_from = "value") %>%
mutate(mag_int = as.numeric(mag))
#proportional spinechart, stacked barchart
stacked_loss <- ggplot(data = tornadoes_no_NA_loss, aes(x = mag, fill = loss))+
geom_bar(position = "fill", color = "grey80")+
labs(x = "Tornado Magnitude (EF-scale)",
y = "Proportion of Losses",
fill = "Property Losses",
title = "Financial Property Losses \nacross Tornado Intensity")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), drop = F) +
tornadoe_theme
#proportional spinechart, stacked barchart
stacked_closs <- ggplot(data = tornadoes_no_NA_closs, aes(x = mag, fill = closs))+
geom_bar(position = "fill", color = "grey80")+
labs(x = "Tornado Magnitude (EF-scale)",
y = "Proportion of Crop Losses",
fill = "Financial Crop Losses",
title = "Financial Crop Losses \nacross Tornado Intensity",
subtitle = "Data is from 2007 to 2023")+
scale_fill_manual(values = c("#FFFFE5", "#FFF7BC", "#FEE391", "#FEC44F", "#FE9929", "#EC7014", "#CC4C02", "#8C2D04"), labels = c("<$50", "$50-$500", "$500-$5,000", "$5,000-$50,000",
"$500,000-$5,000,000",
"$5,000,000-$50,000,000",
"$50,000,000-$500,000,000", "$5,000,000,000"), drop = FALSE) +
tornadoe_theme
# sidebyside barchart -- using SD -- errorbars dodge
sidebyside_fat_inj <- ggplot(pivot_inj_fat, aes(x = mag, y = mean))+
geom_bar(aes(fill = inj_fat), position = position_dodge(), stat = "identity")+
geom_errorbar(aes(ymin = lower, ymax = upper, group = inj_fat), color = "red", width = 0.2, position = position_dodge(width = 0.9))+
labs(x = "Tornado Magnitude (EF-scale)",
y = "Average Number of Injuries / Fatalities ",
title = "Injuries and Fatalities \nacross Tornado Intensity",
subtitle = "Error Bars representing 95% Confidence Intervals",
fill = "Injuries/Fatalities")+
scale_fill_manual(values = c("#fc8d62", "#8da0cb")) +
tornadoe_theme
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_loss_300.png", stacked_loss, dpi = 300, width = 10)
ggsave("stacked_closs_300.png", stacked_closs, dpi = 300, width = 10)
ggsave("sidebyside_fat_inj_300.png", sidebyside_fat_inj, dpi = 300, width = 9)
head(tornadoes_no_NA_loss$loss == 5)
tornadoes_no_NA_loss_no_5 <- tornadoes_no_NA_loss %>%
filter(loss == 5)
tornadoes_no_NA_loss_no_5
nrow(tornadoes_no_NA)
#Recategorizing -9 mags in dataset to NA
tornadoes_no_NA <- tornadoes  %>%
mutate(mag = factor(mag)) %>% #making it a factor
mutate(mag = case_when(mag == "-9" ~ NA, mag != "-9" ~ mag)) %>%
filter(!is.na(mag))
library(shiny)
shinyApp(
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "height",
label = "Height to Cut Dendrogram:",
min = 0,
max = 10,
value = 4.2
)
),
# Output: Histogram ----
plotOutput(outputId = "dendrogram")
),
server <- function(input, output) {
output$dendrogram <- renderPlot({
# x    <- faithful$waiting
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
# hist(x, breaks = bins, col = "#007bc2", border = "orange",
#       xlab = "Waiting time to next eruption (in mins)",
#       main = "Histogram of waiting times")
hline <- length.out = input$height
dend %>%
set("branches_k_col", branch_pal, k = 7) %>%
set("labels_col", text_pal[UScereal$shelf], order_value = TRUE) %>%
set("labels_cex", .5) %>%
ggplot(horiz = TRUE, theme = NULL) +
labs(x = "Cereal name", y = "Distance",
title = "Hierarchical clustering of US cereals,\ncolored by shelf height",
subtitle = "Red = shelf 1; blue = shelf 2; green = shelf 3",
caption = "Source: UScereal dataset in R's MASS package") +
theme(axis.text.y = element_blank()) +
ylim(13, -3) +
geom_hline(yintercept = hline, linetype = 'dashed')
})
}
)
library(bslib)
hline <- length.out = input$height
dend %>%
set("branches_k_col", branch_pal, k = 7) %>%
set("labels_col", text_pal[UScereal$shelf], order_value = TRUE) %>%
set("labels_cex", .5) %>%
ggplot(horiz = TRUE, theme = NULL) +
labs(x = "Cereal name", y = "Distance",
title = "Hierarchical clustering of US cereals,\ncolored by shelf height",
subtitle = "Red = shelf 1; blue = shelf 2; green = shelf 3",
caption = "Source: UScereal dataset in R's MASS package") +
theme(axis.text.y = element_blank()) +
ylim(13, -3) +
geom_hline(yintercept = hline, linetype = 'dashed')
k = max(cutree(dend, h = input$height) )
deployApp()
library(shiny)
library(ggplot2)
library(rsconnect)
deployApp()
setwd("~/SC326 Stats Graphs/Interactive Graphics Project/SC326-TRE-Interactive-Graphics-Project")
deployApp()
deployApp()
